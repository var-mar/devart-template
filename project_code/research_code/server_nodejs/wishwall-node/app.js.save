// Libraries
var express = require('express')
  , passport = require('passport')
  , util = require('util')
  //, flash = require('connect-flash')
  //, LocalStrategy = require('passport-local').Strategy
  //, RememberMeStrategy = require('../..').Strategy
  , GoogleStrategy = require('passport-google-oauth').OAuth2Strategy
  , WishProvider = require('./wishprovider').WishProvider
  , UserMongo = require('./db_objects').UserMongo
  , WishMongo = require('./db_objects').WishMongo
  ,mongoose = require('mongoose');



// API Access link for creating client ID and secret:
// https://code.google.com/apis/console/
var GOOGLE_CLIENT_ID = "497671931593.apps.googleusercontent.com";
var GOOGLE_CLIENT_SECRET = "Itn_aLkhcwf3KixFkDyZbC_g";
// Global variables
var wishProvider= new WishProvider('localhost', 27017);
mongoose.connect('mongodb://127.0.0.1:27017/wishwall');

// Create app 
var app = express.createServer();
// Configure Express
app.configure(function() {
  app.set('views', __dirname + '/views');
  app.set('view engine', 'ejs');
  app.use(express.logger());
  app.use(express.cookieParser());
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express.session({ secret: 'keyboard cat' }));
  // Initialize Passport!  Also use passport.session() middleware, to support
  // persistent login sessions (recommended).
  app.use(passport.initialize());
  app.use(passport.session());
  //app.use(passport.authenticate('remember-me'));
  app.use(app.router);
  app.use(express.static(__dirname + '/public'));
});
app.listen(8000);

// Passport session setup.
//   To support persistent login sessions, Passport needs to be able to
//   serialize users into and deserialize users out of the session.  Typically,
//   this will be as simple as storing the user ID when serializing, and finding
//   the user by ID when deserializing.  However, since this example does not
//   have a database of user records, the complete Google profile is serialized
//   and deserialized.
passport.serializeUser(function(user, done) {
  done(null, user);
});

passport.deserializeUser(function(obj, done) {
  done(null, obj);
});

// Use the GoogleStrategy within Passport.
//   Strategies in Passport require a `verify` function, which accept
//   credentials (in this case, an accessToken, refreshToken, and Google
//   profile), and invoke a callback with a user object.
passport.use(new GoogleStrategy({
    clientID: "497671931593.apps.googleusercontent.com",
    clientSecret:  "Itn_aLkhcwf3KixFkDyZbC_g",
    callbackURL: "http://var-mar.info/auth/google/callback"
  },
  function(accessToken, refreshToken, profile, done) {
    
    // asynchronous verification, for effect...
    process.nextTick(function () {
	console.log("profile:");
	//console.log(profile);
	console.log(accessToken);
	    
      // To keep the example simple, the user's Google profile is returned to
      // represent the logged-in user.  In a typical application, you would want
      // to associate the Google account with a user record in your database,
      // and return that user instead.
      return done(null, profile);
    });
  }
));


// URL methods
  
app.get('/', function(req, res){
	res.render('index', { user: req.user });
});

app.get('/account', ensureAuthenticated, function(req, res){
  res.render('account', { user: req.user });
});

app.get('/wish/list', ensureAuthenticated, function(req, res){
    res.render('tableWish', { user: req.user });
});


app.get('/wish/list/json', ensureAuthenticated, function(req, res){
  wishProvider.findAll(function(error, emps){
	res.writeHead(200, {"Content-Type": "application/json"});
	res.end(JSON.stringify(emps));
  });
});

app.get('/wish/stats/json', ensureAuthenticated, function(req, res){
  wishProvider.findAll(function(error, emps){
	res.writeHead(200, {"Content-Type": "application/json"});
	res.end(JSON.stringify({"total_wishes":emps.length,"total_wishes_last_24":emps.length,"total_by_each_hours":emps.length}));
  });
});

//save new wish
app.get('/wish/send', ensureAuthenticated, function(req, res){
    res.render('sendWish', { user: req.user });
});

//save new wish
app.post('/wish/new', ensureAuthenticated, function(req, res){
    var ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    wishProvider.save({
        text: req.param('txt'),
        user: req.user.emails[0].value
    }, function( error, docs) {
        res.redirect('/')
    });
});

app.get('/login', function(req, res){
  res.render('login', { user: req.user });
});

// GET /auth/google
//   Use passport.authenticate() as route middleware to authenticate the
//   request.  The first step in Google authentication will involve
//   redirecting the user to google.com.  After authorization, Google
//   will redirect the user back to this application at /auth/google/callback
app.get('/auth/google',
  passport.authenticate('google', { scope: ['https://www.googleapis.com/auth/userinfo.profile',
                                            'https://www.googleapis.com/auth/userinfo.email'] }),
  function(req, res){
    // The request will be redirected to Google for authentication, so this
    // function will not be called.
  });

// GET /auth/google/callback
//   Use passport.authenticate() as route middleware to authenticate the
//   request.  If authentication fails, the user will be redirected back to the
//   login page.  Otherwise, the primary route function function will be called,
//   which, in this example, will redirect the user to the home page.
app.get('/auth/google/callback', 
  passport.authenticate('google', { failureRedirect: '/login' }),
  function(req, res) {
    res.redirect('/');
  });

app.get('/logout', function(req, res){
  res.clearCookie('remember_me');
  req.logout();
  res.redirect('/');
});

// Simple route middleware to ensure user is authenticated.
//   Use this route middleware on any resource that needs to be protected.  If
//   the request is authenticated (typically via a persistent login session),
//   the request will proceed.  Otherwise, the user will be redirected to the
//   login page.
function ensureAuthenticated(req, res, next) {
  if (req.isAuthenticated()) { return next(); }
  res.redirect('/login')
}

