<!-- load jQuery and tablesorter scripts -->
<link rel="stylesheet" href="/tablesorter/css/theme.blue.css">
<link rel="stylesheet" href="/tablesorter/css/pager.css">
<script type="text/javascript" src="/tablesorter/js/jquery.tablesorter.js"></script>

<!-- tablesorter widgets (optional) -->
<script type="text/javascript" src="/tablesorter/js/jquery.tablesorter.widgets.js"></script>
<script type="text/javascript" src="/tablesorter/js/jquery.tablesorter.pager.js"></script>

<div id="wishtable">

<input class="search" type="search">
<button type="button" class="reset">Reset Search</button> <!-- targeted by the "filter_reset" option -->

<div class="pager">
    <form>
        <img src="/tablesorter/addons/pager/icons/first.png" class="first"/>
        <img src="/tablesorter/addons/pager/icons/prev.png" class="prev"/>
        <input type="text" class="pagedisplay"/>
        <img src="/tablesorter/addons/pager/icons/next.png" class="next"/>
        <img src="/tablesorter/addons/pager/icons/last.png" class="last"/>
        <select class="pagesize">
            <option selected="selected"  value="10">10</option>
            <option value="20">20</option>
            <option value="30">30</option>
            <option  value="40">40</option>
        </select>
    </form>
</div>

<a href="javascript:loadWishesToTable();">Refresh table</a></br>

<table id="wishesTable" class="tablesorter" cellspacing="0" cellpadding="0">
    <thead>
      <tr>
        <th><span>Wish</span></th>
        <th><span>Exhibition/Online</span></th>
        <th><span>Country</span></th>
        <th><span>Date</span></th>
        <th><span>Ban</span></th>
      </tr>
    </thead>
    <tbody id="wishtable_body">
    </tbody>
</table>  
</div>



<script type="text/javascript">
    $(document).ready(function () {
        loadWishesToTable();
        // refresh each 60 seconds
        setTimeout('loadWishesToTable()',60000);
        setTableSorter();
    });

    function loadWishesToTable(){
        //alert("call");
        $.getJSON( "/wish/list/json/nonban", function( data ) {
        var items = "";
        $.each( data, function( key, val ) {
            items += "<tr id='" + val._id + "'>";
            items += "<td>" + val.text + "</td>";
            items += "<td>" + val.origen + "</td>";
            items += "<td>" + val.country + "</td>";
            items += "<td>" +  timeStrings(val.time)+ "</td>";
            items += "<td>" + val.ban + "</td>";
            items += "<td><a href=\"javascript:banWish('" + val._id + "','" + val.text + "')\">ban this</a></td>";
            items += "</tr>";
        });
        $("#wishtable_body").html(items);
        
        var t = $("table");
        t.trigger('update');
        });
    }

    function banWish(id, text){
        $.post( "/wish/ban", { id: id }).done(function( data ) {});
        $( "#"+id ).remove();
        var t = $("table");
        t.trigger('update');
    }

    function setTableSorter(){
          // **********************************
          //  Description of ALL pager options
          // **********************************
          var pagerOptions = {

            // target the pager markup - see the HTML block below
            container: $(".pager"),

            // use this url format "http:/mydatabase.com?page={page}&size={size}&{sortList:col}"
            ajaxUrl: null,

            // modify the url after all processing has been applied
            customAjaxUrl: function(table, url) { return url; },

            // process ajax so that the data object is returned along with the total number of rows
            // example: { "data" : [{ "ID": 1, "Name": "Foo", "Last": "Bar" }], "total_rows" : 100 }
            ajaxProcessing: function(ajax){
              if (ajax && ajax.hasOwnProperty('data')) {
                // return [ "data", "total_rows" ];
                return [ ajax.total_rows, ajax.data ];
              }
            },

            // output string - default is '{page}/{totalPages}'
            // possible variables: {page}, {totalPages}, {filteredPages}, {startRow}, {endRow}, {filteredRows} and {totalRows}
            output: '{startRow} to {endRow} ({totalRows})',

            // apply disabled classname to the pager arrows when the rows at either extreme is visible - default is true
            updateArrows: true,

            // starting page of the pager (zero based index)
            page: 0,

            // Number of visible rows - default is 10
            size: 10,

            // Save pager page & size if the storage script is loaded (requires $.tablesorter.storage in jquery.tablesorter.widgets.js)
            savePages : true,

            // if true, the table will remain the same height no matter how many records are displayed. The space is made up by an empty
            // table row set to a height to compensate; default is false
            fixedHeight: true,

            // remove rows from the table to speed up the sort of large tables.
            // setting this to false, only hides the non-visible rows; needed if you plan to add/remove rows with the pager enabled.
            removeRows: false,

            // css class names of pager arrows
            cssNext: '.next', // next page arrow
            cssPrev: '.prev', // previous page arrow
            cssFirst: '.first', // go to first page arrow
            cssLast: '.last', // go to last page arrow
            cssGoto: '.gotoPage', // select dropdown to allow choosing a page

            cssPageDisplay: '.pagedisplay', // location of where the "output" is displayed
            cssPageSize: '.pagesize', // page size selector - select dropdown that sets the "size" option

            // class added to arrows when at the extremes (i.e. prev/first arrows are "disabled" when on the first page)
            cssDisabled: 'disabled', // Note there is no period "." in front of this class name
            cssErrorRow: 'tablesorter-errorRow' // ajax error information row

          };

        var $table = $("table")

            // Initialize tablesorter
            // ***********************
            .tablesorter({
              theme: 'blue',
              widthFixed: true,
              widgets: ['zebra'],
              widgetOptions : {
                // if true overrides default find rows behaviours and if any column matches query it returns that row
                filter_anyMatch : true,
                filter_columnFilters: false,
                filter_reset: '.reset'
                }
            })

            // bind to pager events
            // *********************
            .bind('pagerChange pagerComplete pagerInitialized pageMoved', function(e, c){
              var msg = '"</span> event triggered, ' + (e.type === 'pagerChange' ? 'going to' : 'now on') +
                ' page <span class="typ">' + (c.page + 1) + '/' + c.totalPages + '</span>';
              $('#display')
                .append('<li><span class="str">"' + e.type + msg + '</li>')
                .find('li:first').remove();
            })

            // initialize the pager plugin
            // ****************************
            .tablesorterPager(pagerOptions);
            //for filtering any match
            $.tablesorter.filter.bindSearch( $table, $('.search') );
    }
  
</script>