{
  "name": "color-scheme",
  "version": "0.0.5",
  "description": "Generate pleasant color schemes",
  "main": "lib/color-scheme.js",
  "scripts": {
    "test": "mocha --compilers coffee:coffee-script",
    "prepublish": "cake build"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/c0bra/color-scheme-js.git"
  },
  "bugs": {
    "url": "https://github.com/c0bra/color-scheme-js/issues"
  },
  "keywords": [
    "color",
    "scheme",
    "generator",
    "random",
    "picker",
    "web"
  ],
  "author": {
    "name": "Brian Hann"
  },
  "license": "BSD",
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "",
    "uglify-js": "",
    "mocha": "",
    "chai": ""
  },
  "readme": "# color-scheme.js\r\n\r\nGenerate pleasant color schemes (sets of colors).\r\n\r\nThis library is based on the perl module [Color::Scheme](http://search.cpan.org/~rjbs/Color-Scheme-1.04/lib/Color/Scheme.pm), which is in turn based on the [Color Scheme Designer website](http://colorschemedesigner.com/).\r\n\r\nCheck out [how it works](http://c0bra.github.com/color-scheme-js/).\r\n\r\nGet the [minified file](https://raw.github.com/c0bra/color-scheme-js/master/lib/color-scheme.min.js) (8kb).\r\n\r\nOr for some reason, you could use the [full file](https://raw.github.com/c0bra/color-scheme-js/master/lib/color-scheme.js) (18kb).\r\n\r\n## Table of Contents\r\n\r\n- [Description](#description)\r\n- [Usage](#usage)\r\n- [Schemes](#schemes)\r\n  - [mono](#mono-monochromatic)\r\n  - [contrast](#contrast)\r\n  - [triade](#triade)\r\n  - [tetrade](#tetrade)\r\n  - [analogic](#analogic)\r\n- [Variations](#variations)\r\n  - [pastel](#pastel)\r\n  - [soft](#soft)\r\n  - [light](#light)\r\n  - [hard](#hard)\r\n  - [pale](#pale)\r\n- [Methods](#methods)\r\n\r\n## Description\r\n\r\nThis module is a JavaScript implementation of the Perl implementation of Color Schemes\r\n2 ([http://wellstyled.com/tools/colorscheme2](http://wellstyled.com/tools/colorscheme2)), a color scheme generator.\r\nStart by visitng the Color Schemes 2 web site and playing with the colors.\r\nWhen you want to generate those schemes on the fly, begin using this modoule.\r\nThe descriptions herein don't make too much sense without actually seeing the\r\ncolorful results.\r\n\r\nHenceforth, paragraphs in quotes denote documentation copied from Color Schemes 2.\r\n\r\n*\"Important note: **This tool doesn't use the standard HSV or HSB model** (the\r\nsame HSV/HSB values ie. in Photoshop describe different colors!). The color\r\nwheel used here differs from the RGB spectre used on computer screens, it's\r\nmore in accordance with the classical color theory. This is also why some\r\ncolors (especially shades of blue) make less bright shades than the basic\r\ncolors of the RGB-model. In plus, the RGB-model uses red-green-blue as primary\r\ncolors, but the red-yellow-blue combination is used here. This deformation also\r\ncauses incompatibility in color conversions from RGB-values. Therefore, the RGB\r\ninput (eg. the HTML hex values like #F854A9) is not exact, the conversion is\r\nrough and sometimes may produce slightly different color.\"*\r\n\r\n## Usage\r\n\r\n### In node.js\r\n\r\nGotta install it first:\r\n\r\n```\r\nnpm install color-scheme\r\n```\r\n\r\n```javascript\r\nvar ColorScheme = require('color-scheme');\r\n\r\nvar scheme = new ColorScheme;\r\nscheme.from_hue(21)         // Start the scheme \r\n      .scheme('triade')     // Use the 'triade' scheme, that is, colors\r\n                            // selected from 3 points equidistant around\r\n                            // the color wheel.\r\n      .variation('soft');   // Use the 'soft' color variation\r\n\r\nvar colors = scheme.colors();\r\n\r\n/*\r\n  colors = [ \"e69373\", \"805240\", \"e6d5cf\", \"bf5830\" ,\r\n             \"77d36a\", \"488040\", \"d2e6cf\", \"43bf30\" ,\r\n             \"557aaa\", \"405c80\", \"cfd9e6\", \"306ebf\" ]\r\n*/\r\n```\r\n\r\n### In the browser\r\n\r\n```html\r\n<script src=\"wherever/your/installed/color-scheme.js\"></script>\r\n\r\n<script>\r\n  // Pretty much the same exact syntax!\r\n  var scheme = new ColorScheme;\r\n  scheme.from_hue(21)         \r\n        .scheme('triade')   \r\n        .variation('soft');\r\n\r\n\r\n  var colors = scheme.colors();\r\n\r\n  /*\r\n    colors = [ \"e69373\", \"805240\", \"e6d5cf\", \"bf5830\" ,\r\n               \"77d36a\", \"488040\", \"d2e6cf\", \"43bf30\" ,\r\n               \"557aaa\", \"405c80\", \"cfd9e6\", \"306ebf\" ]\r\n  */\r\n<script>\r\n```\r\n\r\n## Schemes\r\n\r\nThere are five color schemes.\r\n\r\n### mono (monochromatic)\r\n\r\nThe monochromatic scheme is based on selecting a single hue on the color wheel, then adding more colors by varying the source color's saturation and brightness.\r\n\r\nFour colors will be produced.\r\n\r\n### contrast\r\n\r\nContrast supplements the selected hue with its complement (the color opposite it on the color wheel) as another source color.\r\n\r\n8 colors will be produced.\r\n\r\n### triade\r\n\r\nTriade takes the selected hue and adds two more source colors that are both a certain distance from the initial hue.\r\n\r\nThe [distance()](#distancefloat) method can be used to specify how far additional source colors will be from the initial hue.\r\n\r\n12 colors will be produced.\r\n\r\n### tetrade\r\n\r\nTetrade adds another yet source color, meaning four total sources.\r\n\r\n16 colors will be produced.\r\n\r\n### analogic\r\n\r\nAnalogic produces colors that are \"analogous\", or next to each other on the color wheel.\r\n\r\nIncreasing the distance [distance()](#distancefloat) will push the colors away from each other. *\"Values between 0.25 and 0.5 (15-30 degrees on the wheel) are optimal.\"*\r\n\r\n12 colors will be produced.\r\n\r\nAdditionally, the [complement()](#complementbool) method can be used to add complementary colors (i.e. those that are opposite the source colors on the color wheel). This will result in 16 colors. *\"It must be treated only as a complement - it adds tension to the palette, and it's too aggressive when overused. However, used in details and as accent of main colors, it can be very effective and elegant.\"*\r\n\r\n## Variations\r\n\r\nThese variations will alter the produced colors. They basically work exactly like filters would in any image editing program.\r\n\r\n### default\r\n\r\nThe default variation. No change to the colors.\r\n\r\n```javascript\r\ns.variation('default');\r\n```\r\n\r\n### pastel\r\n\r\nProduces pastel colors, which have in HSV high value and low-intermediate saturation.\r\n\r\n```javascript\r\ns.variation('pastel');\r\n```\r\n\r\n### soft\r\n\r\nProduces darker pastel colors.\r\n\r\n```javascript\r\ns.variation('soft');\r\n```\r\n\r\n### light\r\n\r\nVery light, almost washed-out colors.\r\n\r\n```javascript\r\ns.variation('light');\r\n```\r\n\r\n### hard\r\n\r\nDeeper, very saturated colors.\r\n\r\n```javascript\r\ns.variation('hard');\r\n```\r\n\r\n### pale\r\n\r\nColors with more gray; less saturated.\r\n\r\n```javascript\r\ns.variation('pale');\r\n```\r\n\r\n## Methods\r\n\r\nColorScheme instances use method chaining to alter settings.\r\n\r\n### scheme([scheme_name])\r\n\r\nSet the scheme to [scheme_name]. The possible values are 'mono', 'contrast', 'triade', 'tetrade', and 'analogic'.\r\n\r\n```javascript\r\nvar s = new ColorScheme\r\n\r\n// Set the scheme to analogic\r\ns.scheme('analogic');\r\n```\r\n\r\n### distance([float])\r\n\r\n**Note:** Only works with the schemes 'triade', 'tetrade', and 'analogic'. (Because 'mono' only has one source color, and with 'contrast' the two source colors are always 180 degrees away from each other.)\r\n\r\nThis method sets the distance of the additional source colors from the initial hue. The value must be a float from 0 to 1.\r\n\r\n```javascript\r\nvar s = new ColorScheme;\r\nvar colors = s.scheme('triade')\r\n .distance(0.75)\r\n .colors();\r\n\r\n/*\r\n  colors = [ \"ff9900\", \"b36b00\", \"ffe6bf\", \"ffcc80\",\r\n             \"00b366\", \"007d48\", \"bfffe4\", \"80ffc9\",\r\n             \"400099\", \"2d006b\", \"dabfff\", \"b580ff\" ]\r\n*/\r\n```\r\n\r\n### complement([bool])\r\n\r\nAdd complementary colors to the ```analogic``` scheme. Does not work with any other scheme.\r\n\r\n### colors()\r\n\r\nReturns the array of generated colors as hex values.\r\n\r\n**Note:** Because this method returns the colors, it obviously *cannot* be chained afterwards.\r\n\r\n```javascript\r\nvar colors = s.colors()\r\n```\r\n",
  "readmeFilename": "README.md",
  "_id": "color-scheme@0.0.5",
  "dist": {
    "shasum": "50d82a87fb3afbb81e0994a67ce6a9297cae6641",
    "tarball": "http://registry.npmjs.org/color-scheme/-/color-scheme-0.0.5.tgz"
  },
  "_from": "color-scheme@~0.0.5",
  "_npmVersion": "1.2.11",
  "_npmUser": {
    "name": "c0bra",
    "email": "emailc0bra@gmail.com"
  },
  "maintainers": [
    {
      "name": "c0bra",
      "email": "emailc0bra@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "50d82a87fb3afbb81e0994a67ce6a9297cae6641",
  "_resolved": "https://registry.npmjs.org/color-scheme/-/color-scheme-0.0.5.tgz",
  "homepage": "https://github.com/c0bra/color-scheme-js"
}
